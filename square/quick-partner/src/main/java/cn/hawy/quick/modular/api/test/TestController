package cn.hawy.quick.modular.api.test;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.CheckedOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import com.alibaba.fastjson.JSON;

import cn.hawy.quick.core.util.RSA;
import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.date.DateUtil;
import cn.hutool.core.lang.Pair;
import cn.hutool.core.lang.WeightRandom;
import cn.hutool.core.lang.WeightRandom.WeightObj;
import cn.hutool.core.map.MapUtil;
import cn.hutool.core.thread.ConcurrencyTester;
import cn.hutool.core.thread.ThreadUtil;
import cn.hutool.core.util.NumberUtil;
import cn.hutool.core.util.RandomUtil;
import cn.hutool.http.HttpRequest;
import cn.hutool.http.HttpUtil;
import cn.hutool.json.JSONObject;
import cn.hutool.json.JSONUtil;

public class TestController {

	public static String PrivateKey = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCkpiK7FMpkCGH+ZNGVC2Ng6sVw35xI61R2CZiaOVRAXs1lX1pz/T+xyXB1CHUox6SmSvkVHS+fu6kqFqTEpAgcyCbCmmLmqcsWeRVSX0MfIYs3u7wy7IwH9/A2ECCGedAZcJBmJPuoPUcyZ9/O2JTK4hBDrxibg+rjjGiD5A85Rdu7hAUEteeV/fEH8MamyWHps4unVKK6cOa4ZWtMZcMu7Ni3/VdPJ9D8FB8jvqOX6/d18fuqkiZ3rA9wsUvBngJlLx4C+XvkBwgx7rvU2J7pJBF90rtp7GXlgJ4wJ/fxz2pdQ88jCP+M1IKNsMjfIrUHip232d9c0wVEhizP5QwzAgMBAAECggEAHtnieBuVMNlBQ2Gww7S2klprVJMRvbgaw2NY7M0BNG6PHgeX81Pos2+DWuqSyWlfOKmjsokde1i2geRsS0xRGNOIL76t+XqnSza1ABJJiXPHmlHbGc+pDXUv1XGAJrJ8g8fLxtf3L7cLuC4uiZubhciGM6iDe+BkCu8sRkpdb+WQmflc6o3bRB1HWmVj/cyIcJai+JjBmNbGmnr3btv5oAUZ4TifNqgw0ak6W0wn2GrUQouFyj/cJnU8sXNJ76lId01wv/auTRAdBY4FWBm0Jw2Ym175QHwOLCXNZiFkx8r/J1GHrzQZazFS6P8ixPxt/SRgOQU/nXpDEKAyakZhAQKBgQD7VJ3omfnqQt6uDZWyFKwhHiG0Y8LebgMKhL7zEA0FiCYpgTmMcGbq1GddLEmxxUqBlvDjXa45VRYbrDlxvEpPiApQPlr2J81mxOOx99LC0J1IKL3xBnkpniTEGPJcUBC+ZOvIEGIeg9Q5YwFLX8StBB4PYf79+HcpxqPYHs7U8QKBgQCntT4GUikbIumnjNoyW2arwhUvgQghqNCaTKJCqa4eoaH0SzncOtNsCXIixMnEiAbDJI3Yo37k1Nbtynjyzw7RXxr2g+wb6/S1fNLGW8q7jxE3jPWsjAhcS5yx+4zFTQcS/SqEzlymrbfHM1Cu8aADJOWF4lUdCm2GNZo4dIfjYwKBgQCPNkhEonil5DS/OT5zmxP6SxEpmS8RT96rv7iPCDZjUJFuVRRV0jbS2PWNQg88HQ+3iCr7ZAZC5RkT669P/9rYNsyprN5oJYYFaWvVnUGbgQQeehjBns6ryFFq7EwuDfF8jEVOWweOG9ByYtf5+zg23oHCgjSqw0ojo+z42ZVCAQKBgQCDvnoSBxrpiVyZ1alW47xc8yMnZSqZHn94pvjUe20f/QM34Jx8Z+3MMgNqUsLZ063UQHP5mj5FzvlkZajrvUK7sQWCYBHrwUlEBOGjF1rESlhRFjesK3kp3/AhVSW5nJARF7X+DAp2mYMERkh8la2IqsRvj2QjYxy00IjtDoXtVwKBgAPt5jxnxfp7Zwl98wM88KNg0H24/4Z0Ura5azGtCbQhQyWiMjovmWvrk8x80XqNkNhGJM1p4SZXgm6XRJGw9/KJL74QehGlSC838PTzQ9LwmIoy/DRrF0kqHi37jVNo8tFGH2aPCANeUccdY390vweYRwbTUVT30FIa4V1Ydr/7";
	public static String PublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApKYiuxTKZAhh/mTRlQtjYOrFcN+cSOtUdgmYmjlUQF7NZV9ac/0/sclwdQh1KMekpkr5FR0vn7upKhakxKQIHMgmwppi5qnLFnkVUl9DHyGLN7u8MuyMB/fwNhAghnnQGXCQZiT7qD1HMmffztiUyuIQQ68Ym4Pq44xog+QPOUXbu4QFBLXnlf3xB/DGpslh6bOLp1SiunDmuGVrTGXDLuzYt/1XTyfQ/BQfI76jl+v3dfH7qpImd6wPcLFLwZ4CZS8eAvl75AcIMe671Nie6SQRfdK7aexl5YCeMCf38c9qXUPPIwj/jNSCjbDI3yK1B4qdt9nfXNMFRIYsz+UMMwIDAQAB";
	//public static String PrivateKey = "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCJevKB0jkYetufBZOyVsVGmpnJ9vyg7Tyn/a6uVQbDz+L619fNwjVPXp6PuLXW7en8Iq0hNTFkLUdltV8/GZKtMIZtOFqRqIRTWMjstHlraZJLSjiYAwJiK5dOELN/pzopDALRZL11v7MYI6pyEHQn0+RUjwHzb/NFmdrKDwzvQEPSYkYmtg8tmLW26Z19+DfzqF/U+kbsBD9RsiJ2JtebxYSoUkw24A3AhoiZU1ae5nsR70/o0+XzRqXEE3gQf3Ojo1ZoTXBwZ/sDeMjyPBxlULiKvBazRT+0vcGtWaJsjTEqHJBOR1LFdnzqhC0lNm5haGLpVgVmh26gvrU78W09AgMBAAECggEAWi4g1xF7zFgCqgwxduE+JHMTAA0YZ8NWb2eTZt11Q4qg/CQLdfe3mmmZnvLtrJ+BRZfFcyv+SxT8aXYQlUaEFUDoXMqDdlpQ+o8ZtVMo9lFY2jREbUpEDPtFE7sW01xxZS1wx8PKF2v44ZO7oXiziNCQTPtFr1a2/+fNQY+fz2uhIKU1EXsV1TMU2NaokYuLdKlbeZPbTBmOrupZMbx+HE2iWdGqLLTrlIi6rjBPgnJRTihXCWR2Mb7sBrxIma0jfVi3oqjZhA6o5zkYjA4qZCcwU8r3a0h8oo50ncMDLAJmhQZVPfJC3Z5ZHUM2KFV3DuwkA7rBbxEb7g0hGvYb4QKBgQDg9tjaBRXtR+LTY5ZdJSq0FgNDnI1rk9CHKqeI9IX0JGxVLYz+AZ71RZLTdBLOKnv0HMxsBe9+NWu+mNThnQvx8RI5mYreFwDNhglDjzJQhbZhO/YnD02P9tvz3NA7C2+P0gNJOmNt+lLNZaTVyjrRY7bT2JxrvKSQg8qRpmw/2QKBgQCccmSj1h10KgJPeCv7SRAiQYeMeo28NL8rTT+iYoDkpwgcK7S4iFUDcELJ8+u6wJHhHpvuO1O+Gx2nckYmCFJ0kFeX2pPuVLWeClfW3k8IW0p+TqPzF8l/+fATvK9X9jIwk9cdqjWmtRAZ5tSXBex5KEnh6YfNsApa9wUXjGbeBQKBgCpnPO6zYLOuBho0PkZmWAtDzu+ylZF+diLULmoJNSqUpvrTMC08nvq6V3eV/Glx5pVXzExcPg07AokVg6LXGEZNW1MSFvPPwC39IsfiOOimm37ub3JjVwpYzJLFv1YxzKB+RHJMGCvFsE/Y5d4KVVXchrydqrZAA4Dd5pPXm7XZAoGAC4q4+Alc5OwQfZJtFD3grdZNzMRh3oe5rtUlI7LGtZfJFmL3E0Ijm3xVwRZ4xq9cU9JxSJMh632Oo4LfwACPLMBVZgOfNE8VkxJKRrTh+cjaZxUgLVgM6p8i4iHigcfNDh5qGWssSB9Fj9OizX2HY6zgPoV/GmKpcOqWepVGJY0CgYEApOQXpAwYjcUz59vLxk5cZ0vsiGly8tXbk+yoP9EMX0z+ggQAKTEl100oYxRQtrTRT9aPQfWDtylZaswANEkUigI2YvoNsgF+5fIhwzCzZuERzsjfd52DJmRyWq/ktppoutPmqQ5L18CoVrtPZE3WPhYIu646XtJaZmlypNAczdA=";
	//public static String PublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiXrygdI5GHrbnwWTslbFRpqZyfb8oO08p/2urlUGw8/i+tfXzcI1T16ej7i11u3p/CKtITUxZC1HZbVfPxmSrTCGbThakaiEU1jI7LR5a2mSS0o4mAMCYiuXThCzf6c6KQwC0WS9db+zGCOqchB0J9PkVI8B82/zRZnayg8M70BD0mJGJrYPLZi1tumdffg386hf1PpG7AQ/UbIidibXm8WEqFJMNuANwIaImVNWnuZ7Ee9P6NPl80alxBN4EH9zo6NWaE1wcGf7A3jI8jwcZVC4irwWs0U/tL3BrVmibI0xKhyQTkdSxXZ86oQtJTZuYWhi6VYFZoduoL61O/FtPQIDAQAB";
	private static final int  BUFFER_SIZE = 2 * 1024;

	public static String testUrl = "http://qpay.shineroon.com:6001/quick/api";
	//public static String testUrl = "http://39.100.6.242:7010/quick/api";
	//public static String testUrl = "http://localhost:7010/quick/api";
	public static String platformPrivateKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxryrwCyVJ1BPhCyGqkg8\n" +
			"1pvR1ioOD+6s4XjUcN6W3IosrzfhjOlIPwf5jqvA2RzkrYpeKwCGUFiziAm4eBUN\n" +
			"gpQkSzBZizm02Q++xK4MOtf964ViApIEs4igfKY3+DZVZP9CPUNzJpcvghUvYjwR\n" +
			"WqF078INNbf+23EI5ajVNYqQwkaRHJTxRHZBeFbkUO9S7eD3PhJSbVlfuFCZzgYM\n" +
			"oVXfQQuaIUokec26CzXA7h8sL6xaew15ACd4UvnXf2kGl5yodV8pYOzvHxK63I9C\n" +
			"MyBP869BvhUC+LliRIfwG9q2tfS9iKh0K7xaM0MObC7zcBWBVch4LMtF0UD6isrE\n" +
			"SwIDAQAB";

	public static void main(String[] args) throws Exception {
		//System.out.println(NumberUtil.compare(Double.parseDouble("0.0044"),Double.parseDouble("0.0045")) < 0);
		/*MyThread myThread=new MyThread();
		ConcurrencyTester ct = new ConcurrencyTester(1000);
		ct.test(myThread);
		System.out.println(ct.getInterval());*/
		//ThreadUtil.concurrencyTest(1000, myThread);
		//addMerchant();
		//bindCard();
		//bindCardConfirm();
		//payPre();
		//payPreConfirm();
		//query();
		//mchCash();
		//mchCashQuery();
		//mchBalanceQuery();
		//System.out.println(NumberUtil.roundStr("0.49", 0));

		//System.out.println(NumberUtil.round(123456.463456, 0));
		//Date date = DateUtil.date();
    	//System.out.println(DateUtil.hour(date, true));
//		HashMap<String, Object> paramMap = new HashMap<>();
//		paramMap.put("username", "xiaoh");
//		paramMap.put("password", "123456");
//		String result= HttpRequest.post("http://localhost/rest/login").form(paramMap).execute().body();
//		System.out.println(result);
		//String result1= HttpRequest.post("http://39.98.166.14:6001/dfyx/user/login").header("Authorization", "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxIiwiZXhwIjoxNTcxOTI0Njc1LCJ1c2VySWQiOjEsImlhdCI6MTU3MTgzODI3NSwiYWNjb3VudCI6ImFkbWluIiwidXNlcktleSI6Inh4eHgifQ.-hcA_CXRim-uFCwgcnoxN9X84J8vBCI9ukLefi-DvFCOXzezcZoExDcW_DA2Vhc0UKh3typ842jYN33DunaGKQ").execute().body();
		//System.out.println(result1);

	}





	public static void addMerchant() {
		HashMap<String, Object> paramMap = new HashMap<>();
    	paramMap.put("reqTime",DateUtil.now());
    	paramMap.put("partnerId", "2000601");
    	paramMap.put("mchName", "小鬼当家");
    	paramMap.put("mchShortName", "小鬼当家");
    	paramMap.put("areaCode", "350104");
    	paramMap.put("mchAddress", "福州大学");
    	paramMap.put("customerName", "肖会");
    	paramMap.put("customerIdentNo", "429001198911125912");
    	paramMap.put("mobile", "18305975931");
    	paramMap.put("email", "541325876@qq.com");
    	String signContent = MapUtil.joinIgnoreNull(MapUtil.sort(paramMap), "&", "=");
		String signature = RSA.sign(signContent, PrivateKey);
		paramMap.put("signature", signature);
    	String result= HttpUtil.post(testUrl+"/mch/addMerchant", paramMap);
    	System.out.println(result);
	}

	public static void bindCard() {
		HashMap<String, Object> paramMap = new HashMap<>();
    	paramMap.put("reqTime",DateUtil.now());
    	paramMap.put("partnerId", "2000601");
    	paramMap.put("mchId", "1151082228975767553");
    	paramMap.put("bankCardNo", "6214855914759952");
    	paramMap.put("mobile", "18305975931");
    	paramMap.put("mchRate", "0.0053");
    	paramMap.put("isSendIssuer", "false");
    	paramMap.put("bankCardType", "debit");
    	//paramMap.put("expired", "2107");
    	//paramMap.put("cvn", "694");
    	String signContent = MapUtil.joinIgnoreNull(MapUtil.sort(paramMap), "&", "=");
		String signature = RSA.sign(signContent, PrivateKey);
		paramMap.put("signature", signature);
    	String result= HttpUtil.post(testUrl+"/mch/bindCard", paramMap);
    	System.out.println(result);
	}

	public static void bindCardConfirm() {
		HashMap<String, Object> paramMap = new HashMap<>();
    	paramMap.put("reqTime",DateUtil.now());
    	paramMap.put("partnerId", "2000601");
    	paramMap.put("mchId", "1151082228975767553");
    	paramMap.put("bankCardNo", "6225768721583068");
    	paramMap.put("smsCode", "713200");
    	String signContent = MapUtil.joinIgnoreNull(MapUtil.sort(paramMap), "&", "=");
		String signature = RSA.sign(signContent, PrivateKey);
		paramMap.put("signature", signature);
    	String result= HttpUtil.post(testUrl+"/mch/bindCardConfirm", paramMap);
    	System.out.println(result);
	}

	public static void payPre() {
		HashMap<String, Object> paramMap = new HashMap<>();
    	paramMap.put("reqTime",DateUtil.now());
    	paramMap.put("partnerId", "2000601");
    	paramMap.put("mchId", "1151082228975767553");
    	paramMap.put("bankCardNo", "6225768721583068");
    	paramMap.put("outTradeNo", "20190726005");
    	paramMap.put("orderAmount", "10");
    	paramMap.put("goodsId", "100000000000001");
    	paramMap.put("goodsName", "test");
    	paramMap.put("goodsType", "100002");
    	paramMap.put("areaCode", "5840");
    	paramMap.put("mccCode", "5311");
    	paramMap.put("notifyUrl", "http://qpay.shineroon.com:6001/quick/test");
    	String signContent = MapUtil.joinIgnoreNull(MapUtil.sort(paramMap), "&", "=");
		String signature = RSA.sign(signContent, PrivateKey);
		paramMap.put("signature", signature);
    	String result= HttpUtil.post(testUrl+"/pay/payPre", paramMap);
    	System.out.println(result);
	}

	public static void payPreConfirm() {
		HashMap<String, Object> paramMap = new HashMap<>();
    	paramMap.put("reqTime",DateUtil.now());
    	paramMap.put("partnerId", "2000601");
    	paramMap.put("mchId", "1151082228975767553");
    	paramMap.put("outTradeNo", "20190726002");
    	paramMap.put("smsCode", "715172");
    	String signContent = MapUtil.joinIgnoreNull(MapUtil.sort(paramMap), "&", "=");
		String signature = RSA.sign(signContent, PrivateKey);
		paramMap.put("signature", signature);
    	String result= HttpUtil.post(testUrl+"/pay/payPreConfirm", paramMap);
    	System.out.println(result);
	}

	public static void query() {
		HashMap<String, Object> paramMap = new HashMap<>();
    	paramMap.put("reqTime",DateUtil.now());
    	paramMap.put("partnerId", "2000601");
    	paramMap.put("mchId", "1151082228975767553");
    	paramMap.put("outTradeNo", "20190716001");
    	String signContent = MapUtil.joinIgnoreNull(MapUtil.sort(paramMap), "&", "=");
		String signature = RSA.sign(signContent, PrivateKey);
		paramMap.put("signature", signature);
    	String result= HttpUtil.post(testUrl+"/pay/query", paramMap);
    	System.out.println(result);
	}

	public static void mchBalanceQuery() {
		HashMap<String, Object> paramMap = new HashMap<>();
    	paramMap.put("reqTime",DateUtil.now());
    	paramMap.put("partnerId", "2000601");
    	paramMap.put("mchId", "1151082228975767553");
    	String signContent = MapUtil.joinIgnoreNull(MapUtil.sort(paramMap), "&", "=");
		String signature = RSA.sign(signContent, PrivateKey);
		paramMap.put("signature", signature);
    	String result= HttpUtil.post(testUrl+"/mch/mchBalanceQuery", paramMap);
    	System.out.println(result);
	}

	public static void mchCash() {
		HashMap<String, Object> paramMap = new HashMap<>();
    	paramMap.put("reqTime",DateUtil.now());
    	paramMap.put("partnerId", "2000601");
    	paramMap.put("mchId", "1151082228975767553");
    	paramMap.put("bankCardNo", "6214855914759952");
    	paramMap.put("outTradeNo", "20190716002");
    	paramMap.put("cashAmount", "99");
    	paramMap.put("cashFee", "69");
    	String signContent = MapUtil.joinIgnoreNull(MapUtil.sort(paramMap), "&", "=");
		String signature = RSA.sign(signContent, PrivateKey);
		paramMap.put("signature", signature);
    	String result= HttpUtil.post(testUrl+"/mch/mchCash", paramMap);
    	System.out.println(result);
	}

	public static void mchCashQuery() {
		HashMap<String, Object> paramMap = new HashMap<>();
    	paramMap.put("reqTime",DateUtil.now());
    	paramMap.put("partnerId", "2000601");
    	paramMap.put("mchId", "1151082228975767553");
    	paramMap.put("outTradeNo", "20190716002");
    	String signContent = MapUtil.joinIgnoreNull(MapUtil.sort(paramMap), "&", "=");
		String signature = RSA.sign(signContent, PrivateKey);
		paramMap.put("signature", signature);
    	String result= HttpUtil.post(testUrl+"/mch/mchCashQuery", paramMap);
    	System.out.println(result);
	}


}


class MyThread implements Runnable{
	public void run(){
		while(true){
			System.out.println("MyThread类的run()方法在运行");
		}
	}
}
